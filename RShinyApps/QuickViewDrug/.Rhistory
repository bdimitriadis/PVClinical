eda.plot(x.d2)
print(x.d2)
prettyPrintList(x.d2)
lyap<-lyapunov(y, tlag=7, dimension=7, local.dimension=3,reference=NULL, n.reference=NULL, olag=0, sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
y
lyap<-lyapunov(y, tlag=NULL, dimension=7, local.dimension=3,reference=NULL, n.reference=NULL, olag=0, sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(y)
summary(lyap)
library('tsfknn')
lyap=lyapunov(y, dimension=7)
library('fractal')
lyap<-lyapunov(y, tlag=NULL, dimension=7, local.dimension=3,reference=NULL, n.reference=NULL, olag=0, sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
lyapunov(y, tlag=NULL, dimension=7, local.dimension=3,reference=NULL, n.reference=NULL, olag=0, sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
lyap=lyapunov(x, tlag=7, dimension=3, local.dimension=3,reference=NULL, n.reference=NULL, olag=21,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(y, tlag=7, dimension=3, local.dimension=3,reference=NULL, n.reference=NULL, olag=21,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(y, tlag=7, dimension=10, local.dimension=3,reference=NULL, n.reference=NULL, olag=21,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(y, tlag=7, dimension=11, local.dimension=3,reference=NULL, n.reference=NULL, olag=21,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(y, tlag=7, dimension=5, local.dimension=3,reference=NULL, n.reference=NULL, olag=21,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(y, tlag=7, dimension=6, local.dimension=3,reference=NULL, n.reference=NULL, olag=21,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(x, tlag=NULL, dimension=7, local.dimension=,reference=NULL, n.reference=NULL,
olag=,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
lyap=lyapunov(x, tlag=NULL, dimension=7, local.dimension=,reference=NULL, n.reference=NULL, olag=7,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(x, tlag=7, dimension=7, local.dimension=,reference=NULL, n.reference=NULL, olag=2,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(x, tlag=7, dimension=7, local.dimension=,reference=NULL, n.reference=NULL, olag=0,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(x, tlag=1, dimension=7, local.dimension=,reference=NULL, n.reference=NULL, olag=0,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(x, tlag=1, dimension=7, local.dimension=7,reference=NULL, n.reference=NULL, olag=0,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(x, tlag=1, dimension=7, local.dimension=NULL,reference=NULL, n.reference=NULL, olag=0,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
library("readxl")
library('rlang')
library('ggplot2')
library('nonlinearTseries')
library("phaseR")
library('DChaos')
library('fractal')
Sicilia <- read_excel("/Users/dimst/Desktop/EP_Italy_Sicilia.xls")
x <- ts(Sicilia$`PRICES Sicilia`)
Sicilia <- read_excel("/Users/dimst/Desktop/EP_Italy_Sicilia.xls")
x <- ts(Sicilia$`PRICES Sicilia`)
x
Sicilia$date <- as.Date(with(Sicilia, paste(YEAR, MONTH, DAY, TIME,sep="-")), "%Y-%m-%d")
Sicilia$date_s <- as.POSIXct(paste(Sicilia$date, Sicilia$TIME), format="%Y-%m-%d %H")
Sicilia$y <- paste(Sicilia$prices)
Sicilia$date <- as.Date(with(Sicilia, paste(YEAR, MONTH, DAY, TIME,sep="-")), "%Y-%m-%d")
Sicilia$date_s <- as.POSIXct(paste(Sicilia$date, Sicilia$TIME), format="%Y-%m-%d %H")
Sicilia$y <- paste(Sicilia$`PRICES Sicilia`)
ggplot(data=Sicilia,aes(x=date_s, y=prices)) +
geom_path(colour="blue") +
ylab("Prices") +
xlab("Dates") +
ggtitle("Price data")
ggplot(data=Sicilia,aes(x=date_s, y=`PRICES Sicilia`)) +
geom_path(colour="blue") +
ylab("Prices") +
xlab("Dates") +
ggtitle("Price data")
x.d2<-corrDim(x, dimension=10,tlag=timeLag(x, method="acfzero"), olag=0, resolution=2)
eda.plot(x.d2)
print(x.d2)
prettyPrintList(x.d2)
x.d2<-corrDim(x, dimension=5,tlag=timeLag(x, method="acfzero"), olag=0, resolution=2)
eda.plot(x.d2)
print(x.d2)
prettyPrintList(x.d2)
x.d2<-corrDim(x, dimension=7,tlag=timeLag(x, method="acfzero"), olag=0, resolution=2)
eda.plot(x.d2)
print(x.d2)
prettyPrintList(x.d2)
x.d2=corrDim(x, dimension=10,tlag=timeLag(x, method="acfdecor"), olag=0, resolution=2)
eda.plot(x.d2)
print(x.d2)
prettyPrintList(x.d2)
x.d2=corrDim(x, dimension=10,tlag=timeLag(x, method="mutual"), olag=0, resolution=2)
eda.plot(x.d2)
print(x.d2)
prettyPrintList(x.d2)
dx2x <- deriv(~ x^2, "x") ; dx2x
phasePortrait(dx2x, ylim = c(-0.2, 1.0))
plot(x, x-4, main="Phase portait",
xlab="Time series", ylab="Time series", pch=19)
dx2x <- deriv(~ x, "x") ; dx2x
phasePortrait(dx2x, ylim = c(-0.2, 1.0))
plot(x, x-4, main="Phase portait",
xlab="Time series", ylab="Time series", pch=19)
portrait3D(x)
#c.	produce the phase portrait graph
library(viridis)
ggdiamonds = ggplot(diamonds, aes(x, depth)) +
stat_density_2d(aes(fill = stat(nlevel)), geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
plot_gg(ggdiamonds,multicore=TRUE,width=5,height=5,scale=250,windowsize=c(1400,866),
zoom = 0.55, phi = 30)
render_snapshot()
plot_gg(ggdiamonds,multicore=TRUE,width=5,height=5,scale=250,windowsize=c(1400,866),
zoom = 0.55, phi = 30)
library('ggplot2')
plot_gg(ggdiamonds,multicore=TRUE,width=5,height=5,scale=250,windowsize=c(1400,866),
zoom = 0.55, phi = 30)
install.packages(viridisLite)
install.packages(viridis)
lyap=lyapunov(x, tlag=4, dimension=10, local.dimension=3,reference=NULL, n.reference=NULL, olag=2,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(x, tlag=4, dimension=10, local.dimension=3,reference=NULL, n.reference=NULL, olag=12,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
fnn=FNN(x, dimension=15, tlag=NULL, rtol=10, atol=2, olag=1)
plot(fnn)
fnn=FNN(x, dimension=10, tlag=4, rtol=10, atol=2, olag=12)
plot(fnn)
x.d2<-corrDim(x, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2)
eda.plot(x.d2)
print(x.d2)
prettyPrintList(x.d2)
kolmogorov = c(2.63, 2.32, 2.14, 2.02, 1.96, 1.97, 1.92, 2.22, 2.08, 2.28)
sum(kolmogorov)
plotc(kolmogorov)
plot(kolmogorov)
kolmogorov = c(2.63, 2.32, 2.14, 2.02, 1.96, 1.97, 1.92, 2.22, 2.08, 2.28, 1.09, 1.11, 1.16, 1.14, 1.15, 1.19, 1.14, 1.29, 1.24, 1.48, 0.09, 0.1, 0.13, 0.09)
sum(kolmogorov)
plot(kolmogorov)
x4hour <- c()
count <- 1
i <- 0
for (j in  0:length(x)){
if(count == 4){
count <- 1
avg <- mean(c(x[c-3]+x[c-2]+x[c-1]+x[c]))
x4hour[i] <- avg
i <- i +1
} else {
count <- count + 1
}
}
x4hour
x4hour <- c()
count <- 1
i <- 0
for (j in  0:length(x)){
if(count == 4){
count <- 1
avg <- mean(c(x[j-3]+x[j-2]+x[j-1]+x[j]))
x4hour[i] <- avg
i <- i +1
} else {
count <- count + 1
}
}
x4hour
plot(x4hour)
plot(ts(x4hour))
x4hour <- ts(x4hour)
x4hour.d2 = corrDim(x4hour, dimension=20,tlag=timeLag(x_4_hour, method="mutual"), olag=0, resolution=2)
eda.plot(x4hour.d2)
print(x4hour.d2)
prettyPrintList(x4hour.d2)
x4hour.d2 = corrDim(x4hour, dimension=20,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
eda.plot(x4hour.d2)
print(x4hour.d2)
prettyPrintList(x4hour.d2)
x4hour
x4hour.d2 = corrDim(x4hour, dimension=20,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
x4hour <- c()
count <- 1
i <- 0
for (j in  0:length(x)){
if(count == 4){
count <- 1
avg <- mean(c(x[j-3]+x[j-2]+x[j-1]+x[j]))
x4hour[i] <- avg
i <- i +1
} else {
count <- count + 1
}
}
x4hour
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
Sicilia <- read_excel("/Users/dimst/Desktop/EP_Italy_Sicilia.xls")
x <- ts(Sicilia$`PRICES Sicilia`)
x
#a.	produce the timeseries graph
Sicilia$date <- as.Date(with(Sicilia, paste(YEAR, MONTH, DAY, TIME,sep="-")), "%Y-%m-%d")
Sicilia$date_s <- as.POSIXct(paste(Sicilia$date, Sicilia$TIME), format="%Y-%m-%d %H")
Sicilia$y <- paste(Sicilia$`PRICES Sicilia`)
library("phaseR")
library('DChaos')
library('fractal')
library("readxl")
library('rlang')
library('ggplot2')
x4hour <- c()
count <- 1
i <- 0
for (j in  0:length(x)){
if(count == 4){
count <- 1
avg <- mean(c(x[j-3]+x[j-2]+x[j-1]+x[j]))
x4hour[i] <- avg
i <- i +1
} else {
count <- count + 1
}
}
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
library("readxl")
library('rlang')
library('ggplot2')
library("phaseR")
library('DChaos')
library('fractal')
Sicilia <- read_excel("/Users/dimst/Desktop/EP_Italy_Sicilia.xls")
x <- ts(Sicilia$`PRICES Sicilia`)
x
Sicilia$date <- as.Date(with(Sicilia, paste(YEAR, MONTH, DAY, TIME,sep="-")), "%Y-%m-%d")
Sicilia$date_s <- as.POSIXct(paste(Sicilia$date, Sicilia$TIME), format="%Y-%m-%d %H")
Sicilia$y <- paste(Sicilia$`PRICES Sicilia`)
#4-hour sampling timeseries
x4hour <- c()
count <- 1
i <- 0
for (j in  0:length(x)){
if(count == 4){
count <- 1
avg <- mean(c(x[j-3]+x[j-2]+x[j-1]+x[j]))
x4hour[i] <- avg
i <- i +1
} else {
count <- count + 1
}
}
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
library('nonlinearTseries')
x4hour <- ts(x4hour)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2, min.radius = NULL)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2, min.radius = 0)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2, min.radius = Inf)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2, min.radius, max.radius)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2, min.radius, max.radius)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2)
x4hour <- c()
c <- 0
count <- 1
i <- 0
while (c < length(x)){
if(count == 4){
count <- 1
avg <- mean(c(x[c-3]+x[c-2]+x[c-1]+x[c]))
x4hour[i] <- avg
i <- i +1
} else {
count <- count + 1
}
c <- c + 1
}
x4hour
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x, method="mutual"), olag=0, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
x4hour <- ts(x4hour)
x4hour.d2 = corrDim(x4hour, dimension=30,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=2, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2, min.radius, max.radius)
library("phaseR")
library('DChaos')
library('fractal')
library("readxl")
library('rlang')
library('ggplot2')
Sicilia <- read_excel("/Users/dimst/Desktop/EP_Italy_Sicilia.xls")
x <- ts(Sicilia$`PRICES Sicilia`)
Sicilia$date <- as.Date(with(Sicilia, paste(YEAR, MONTH, DAY, TIME,sep="-")), "%Y-%m-%d")
Sicilia$date_s <- as.POSIXct(paste(Sicilia$date, Sicilia$TIME), format="%Y-%m-%d %H")
Sicilia$y <- paste(Sicilia$`PRICES Sicilia`)
x4hour <- c()
c <- 0
count <- 1
i <- 0
while (c < length(x)){
if(count == 4){
count <- 1
avg <- mean(c(x[c-3]+x[c-2]+x[c-1]+x[c]))
x4hour[i] <- avg
i <- i +1
} else {
count <- count + 1
}
c <- c + 1
}
x4hour <- ts(x4hour)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
x.d2<-corrDim(x, dimension=7,tlag=timeLag(x, method="acfzero"), olag=0, resolution=2)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="acfdecor"), olag=0, resolution=2)
eda.plot(x4hour.d2)
print(x4hour.d2)
prettyPrintList(x4hour.d2)
x4hour.d2 = corrDim(x4hour, dimension=10,tlag=timeLag(x4hour, method="mutual"), olag=0, resolution=2)
lyap=lyapunov(x4hour, tlag=2, dimension=10, local.dimension=3,reference=NULL, n.reference=NULL, olag=6,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
kolmogorov = c(2.19, 1.9, 1.7, 1.59, 1.52, 1.48, 1.44, 1.45, 1.59, 0.76, 0.68, 0.66, 0.65, 0.69, 0.76, 0.73, 0.68, 0.81)
sum(kolmogorov)
c <- c + 1
plot(kolmogorov)
library('itsmr')
db <- lake
db <- lake
plotc(db)
a <- log(db)
plotc(a)
times = ts(lake,frequency = 2)
timeseriescomponents = decompose(times)
plot(timeseriescomponents)
times
plot(trend(a,1))
plot(trend(a,1))
q=trend(a,1)
w=ts(a-q)
dl_w = diff(w)
M = c("log","trend",1,"diff",1)
test(dl_w)
plotc(dl_w)
b<-burg(dl_w,4)
print(b)
y <- yw(dl_w,4)
print(y)
aa <- arima(dl_w, order = c(1,0,2))
aa
auto <- autofit(dl_w, p= 0:5, q = 0:5)
auto
aa <- arma(dl_w, order = c(1,0,2))
aa
forecast(lake, M, aa)
forecast(lake, M, auto)
library(dygraphs)
library(tseriesChaos)
library(ggplot2)
library(splus2R)
library(akima)
library(scatterplot3d)
library(fractal)
library(readr)
library(tsfknn)
library(wmtsa)
library(sapa)
library(ifultools)
library(readxl)
library("nonlinearTseries", lib.loc=.libPaths('Program Files/R/R-3.6.3/library/nonlinearTseries')[-1])
library(dygraphs)
library(tseriesChaos)
library(ggplot2)
library(splus2R)
library(akima)
library(scatterplot3d)
library(fractal)
library(readr)
library(tsfknn)
library(wmtsa)
library(sapa)
library(ifultools)
library(readxl)
my_data <- read_excel("C:\Users\dimst\Desktop\EP_Italy_South.xls")
my_data <- read_excel("C:/Users/User/Desktop/EP_Italy_South.xls")
my_data <- read_excel("C:\Users\User\Desktop\EP_Italy_South.xls")
my_data <- read_excel("C:\\Users\\User\\Desktop\\EP_Italy_South.xls")
my_data <- read_excel("C:\User\Desktop\EP_Italy_South.xls")
my_data <- read_excel(file.choose())
my_data.df = data.frame(my_data)
prices = ts(my_data.df$PRICES.Southern)
plot(prices) #plot time series
timeLag(prices, method="mutual")
# produce graphs
my_data.d2 = corrDim(prices, dimension = 30, tlag = timeLag(prices, method="mutual"), olag=0, resolution = 2)
eda.plot(my_data.d2) #phase portrait
eda.plot(my_data.d2) #phase portrait
print(my_data.d2)
prettyPrintList(my_data.d2)
library(fractal)
my_data.d2 =  corrDim(prices, dimension=20,tlag=timeLag(x, method="mutual"), olag=0, resolution=2)
eda.plot(my_data.d2) #phase portrait
print(my_data.d2)
prettyPrintList(my_data.d2)
eda.plot(my_data.d2) #phase portrait
spt=spaceTime(my_data, dim=3, tlag=10,olag.max=500, probability=1/10)
fnn=FNN(my_data, dimension=5, tlag=NULL, rtol=10, atol=2, olag=1)
fns=FNN(my_data, dimension=5, tlag=NULL, atol=1, image.tol=1, olag=1)
fns=FNS(my_data, dimension=5, tlag=NULL, atol=1, image.tol=1, olag=1)
install.packages("akima")
install.packages("tseriesChaos")
install.packages("dygraphs")
install.packages("dygraphs")
library(dygraphs)
library(tseriesChaos)
library(ggplot2)
library(splus2R)
library(akima)
library(scatterplot3d)
library(fractal)
library(readr)
library(tsfknn)
library(wmtsa)
library(sapa)
library(ifultools)
library(readxl)
library("nonlinearTseries", lib.loc=.libPaths('Program Files/R/R-3.6.3/library/nonlinearTseries')[-1])
spt=spaceTime(my_data, dim=3, tlag=10,olag.max=500, probability=1/10)
fnn=FNN(my_data, dimension=5, tlag=NULL, rtol=10, atol=2, olag=1)
fns=FNS(my_data, dimension=5, tlag=NULL, atol=1, image.tol=1, olag=1)
embedding =embedSeries( my_data, dim = 3, tlag = 10 )
nn.distance=findNeighbors(embedding, n.neighbor=NULL, metric=1, max.distance = 0.,olag=0, sort.distances=TRUE)
stationarity(my_data, n.block=8)
my_data <- read_excel(file.choose())
prices = ts(my_data.df$PRICES.Southern)
plot(prices) #plot time series
my_data.d2 =  corrDim(prices, dimension=20,tlag=timeLag(x, method="mutual"), olag=0, resolution=2)
my_data.d2 =  corrDim(prices, dimension=20,tlag=timeLag(prices, method="mutual"), olag=0, resolution=2)
eda.plot(my_data.d2) #phase portrait
print(my_data.d2)
prettyPrintList(my_data.d2)
eda.plot(my_data.d2) #phase portrait
spt=spaceTime(my_data, dim=3, tlag=10,olag.max=500, probability=1/10)
spt=spaceTime(my_data, dim=3, tlag=4,olag.max=500, probability=1/10)
fnn=FNN(my_data, dimension=5, tlag=4, rtol=10, atol=2, olag=1)
fns=FNS(my_data, dimension=5, tlag=4, atol=1, image.tol=1, olag=1)
embedding =embedSeries( my_data, dim = 3, tlag = 10 )
stationarity(my_data, n.block=8)
spt=spaceTime(prices, dim=3, tlag=4,olag.max=500, probability=1/10)
fnn=FNN(prices, dimension=5, tlag=4, rtol=10, atol=2, olag=1)
fns=FNS(prices, dimension=5, tlag=4, atol=1, image.tol=1, olag=1)
plot(spt)
spt
plot(fnn)
plot(fns)
embedding =embedSeries(prices, dim = 3, tlag = 4)
nn.distance=findNeighbors(embedding, n.neighbor=NULL, metric=1, max.distance = 0.,olag=0, sort.distances=TRUE)
stationarity(prices, n.block=8)
lyap=lyapunov(prices, tlag=NULL, dimension=7, local.dimension=7,reference=NULL, n.reference=NULL, olag=2,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
lyap=lyapunov(prices, tlag=4, dimension=7, local.dimension=7,reference=NULL, n.reference=NULL, olag=2,sampling.interval=NULL, polynomial.order=3, metric=Inf, scale=NULL)
plot(lyap)
summary(lyap)
pred <- knn_forecasting(x, h = 4, lags = 1:12, k = 3, msas = "MIMO",cf="weighted")
autoplot(pred, highlight = "neighbors", faceting = FALSE)
print(pred$prediction)
pred <- knn_forecasting(x, h = 4, lags = 1:12, k = 3, msas = "MIMO",cf="weighted")
pred <- knn_forecasting(prices, h = 4, lags = 1:12, k = 3, msas = "MIMO",cf="weighted")
autoplot(pred, highlight = "neighbors", faceting = FALSE)
print(pred$prediction)
autoplot(pred, highlight = "neighbors", faceting = FALSE)
library(labeling)
predic=nonLinearPrediction(my_data,embedding.dim=3,time.lag=12,prediction.step=1,radius=sqrt(sd(my_data)),radius.increment=sqrt(sd(my_data)/2)
predic
predic=nonLinearPrediction(prices,embedding.dim=3,time.lag=12,prediction.step=1,radius=sqrt(sd(my_data)),radius.increment=sqrt(sd(my_data)/2)
predic
DFA.my_data=DFA(prices, detrend="poly1", sum.order=0, overlap=0,scale.max=trunc(length(my_data)/2), scale.min=NULL,scale.ratio=2, verbose=FALSE)
print(DFA.my_data)
eda.plot(DFA.my_data)
cd = corrDim(prices,
min.embedding.dim = emb.dim,
max.embedding.dim = emb.dim + 5,
time.lag = tau.ami,
min.radius = 0.001, max.radius = 50,
n.points.radius = 40,
do.plot=FALSE)
library(nonlinearTseries)
library("nonlinearTseries")
install.packages("nonlinearTseries")
install.packages("nonlinearTseries")
library("nonlinearTseries")
cd = corrDim(prices,
min.embedding.dim = emb.dim,
max.embedding.dim = emb.dim + 5,
time.lag = tau.ami,
min.radius = 0.001, max.radius = 50,
n.points.radius = 40,
do.plot=FALSE)
my_data.d2 =  corrDim(prices, dimension=20,tlag=timeLag(prices, method="mutual"), olag=0, resolution=2)
library("bioconductor")
BiocInstaller::biocVersion()
library(BiocInstaller)
install.packages('BiocInstaller')
shiny::runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/QuickViewDrug')
