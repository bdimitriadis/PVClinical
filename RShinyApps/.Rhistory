}
return(s)
}
getsearchtype <- reactive({
if (getwhichprogram() == 'E'){
return(   "Reaction" )
} else {
return( 'Drug' )
}
})
getwhichprogram <- reactive( {
return( getwhich() )
})
getvar1 <- reactive({
anychanged()
q <- geturlquery()
if (getwhichprogram() == 'E'){
return(   "patient.reaction.reactionmeddrapt" )
} else {
return(input$v1)
}
})
getprrvarname <- reactive({
q <- geturlquery()
if (getwhichprogram() != 'E'){
#PRR table of reactions
return(   "patient.reaction.reactionmeddrapt.exact" )
} else {
#PRR table of drugs
return( paste0(input$v1, '.exact') )
}
})
getexactvar1 <- reactive({
q <- geturlquery()
s <- getvar1()
return(   paste0(s, ".exact") )
})
getbestvar1 <- function(){
exact <-   ( getdrugcounts()$exact)
if (exact){
return( getexactvar1() )
} else {
return( getvar1() )
}
}
getbestterm1 <- function(quote=TRUE){
exact <-   ( getdrugcounts()$exact)
if (exact)
{
s <- getterm1( session, quote = TRUE )
s <- gsub(' ', '%20', s, fixed=TRUE)
return( s )
} else {
return( getterm1( session ) )
}
}
gettimevar <- function(){
return ('receiptdate')
}
gettimerange <- reactive({
geturlquery()
mydates <- getstartend()
start <- mydates[1]
end <-  mydates[2]
timerange <- paste0('[', start, '+TO+', end, ']')
return(timerange)
})
getstartend <- reactive({
geturlquery()
start <- input$daterange[1]
end <- input$daterange[2]
return( c(start, end))
})
gettimeappend <- reactive({
geturlquery()
mytime <- getstartend()
s <- paste0('&start=', mytime[1] , '&end=', mytime[2] )
return( s )
})
# Input SETTERS ====================================================================
updatevars <- reactive({
input$update
if(!is.null(session$erroralert))
{
closeAlert(session, 'erroralert')
}
isolate( {
updateTextInput(session, "t1", value=( input$drugname ) )
updateNumericInput(session, "limit", value= ( input$limit2 ) )
updateNumericInput(session, "start", value= ( input$start2 ) )
})
})
anychanged <- reactive({
a <- input$t1
b <- input$v1
c <- input$useexact
if(!is.null(session$erroralert))
{
closeAlert(session, 'erroralert')
}
})
output$mymodal <- renderText({
if (input$update > 0)
{
updatevars()
toggleModal(session, 'modalExample', 'close')
}
return('')
})
geturlquery <- reactive({
q <- parseQueryString(session$clientData$url_search)
updateNumericInput(session, "limit", value = q$limit)
updateNumericInput(session, "limit2", value = q$limit)
if( getwhich()== 'D'){
updateSelectizeInput(session, 't1', selected= q$drug)
updateSelectizeInput(session, 't1', selected= q$t1)
updateSelectizeInput(session, 'drugname', selected= q$drug)
updateSelectizeInput(session, 'drugname', selected= q$t1)
} else {
updateSelectizeInput(session, 't1', selected= q$event)
updateSelectizeInput(session, 't1', selected= q$t1)
updateSelectizeInput(session, 'drugname', selected= q$event)
updateSelectizeInput(session, 'drugname', selected= q$t1)
}
updateSelectizeInput(session, inputId = "v1", selected = q$drugvar)
updateSelectizeInput(session, inputId = "v1", selected = q$v1)
updateRadioButtons(session, 'useexact',
selected = if(length(q$useexact)==0) "exact" else q$useexact)
updateRadioButtons(session, 'useexactD',
selected = if(length(q$useexactD)==0) "exact" else q$useexactD)
updateRadioButtons(session, 'useexactE',
selected = if(length(q$useexactE)==0) "exact" else q$useexactE)
updateDateRangeInput(session, 'daterange', start = q$start, end = q$end)
updateTabsetPanel(session, 'maintabs', selected=q$curtab)
return(q)
})
output$drugname <- renderText({
s <- getterm1description( input$useexact, getterm1( session ) )
renderterm( s, 'Drug Name:')
} )
output$eventname <- renderText({
s <- getterm1description( input$useexact, getterm1( session ) )
renderterm( s, 'Event Name:')
} )
output$limit <- renderText({ renderterm( getlimit( session ), 'Limit Analysis to', 'most frequent terms') } )
output$start <- renderText({
startfont <- '<i><font color="dodgerblue" size="4">'
endfont <- '</font></i>'
renderterm( getstart( session ), 'Start analysis at ranked frequency count # ',
label2=paste( '<br>Analyzing counts with ranked frequencies from',
startfont, getstart( session ) , endfont,
'to',
startfont, getstart( session )+getlimit( session )-1, endfont  ) )
} )
output$curtab <- renderText({
renderterm( input$limit )
} )
# General Reactives ============================================================
#************************************
# Get Drug-Event Query
#*********************
# Only use the first value of limit rows
getdrugcounts <- reactive({
geturlquery()
v <- c('_exists_' , getexactvar1(), gettimevar() )
t <- c(  getexactvar1() ,getterm1( session, quote = TRUE ), gettimerange() )
#browser()
mylist <-  getcounts999( session, v= v, t= t,
count=getprrvarname(), exactrad = input$useexact )
mydfAll <- mylist$mydf
start <- getstart( session )
last <- min(getlimit( session ) + start - 1, nrow(  mydfAll ) )
#If Not enough event terms to start at start, look at last limit values
if( last < start )
{
start <- last - getlimit( session )
}
mydf <- mydfAll[ start:last,]
return( list(mydf=mydf, mydfAll= mydfAll, myurl=mylist$myurl, excludeddf = mylist$excludeddf, exact = mylist$exact   ) )
})
#Build table containing drug-event pairs
getdrugcountstable <- reactive({
geturlquery()
mylist <- getdrugcounts()
myurl <- mylist$myurl
#mydf for limit terms
mydf <- mylist$mydf
#mydf for all terms
mydfAll <- mylist$mydfAll
mydfsource <- mydf
mydfallsource <- mydfAll
names <- c('v1','t1' ,'v3', 't3', 'v2', 't2' )
values <- c(getbestvar1(), getbestterm1(), gettimevar(), gettimerange(),  getprrvarname() )
mydf[,2] <- numcoltohyper(mydf[ , 2], mydf[ , 1], names, values, mybaseurl = getcururl(), addquotes=TRUE )
mydfAll[,2] <- numcoltohyper(mydfAll[ , 2], mydfAll[ , 1], names, values, mybaseurl = getcururl(), addquotes=TRUE )
#    browser()
if (getwhich()=='D')
{
mydf[,1] <- coltohyper(mydf[,1],  'E',
mybaseurl = getcururl(), append= paste0( "&v1=", input$v1, "&useexact=", 'exact', gettimeappend() )  )
mydfAll[,1] <- coltohyper(mydfAll[,1],  'E',
mybaseurl = getcururl(), append= paste0( "&v1=", input$v1, "&useexact=", 'exact', gettimeappend() ) )
} else {
mydf[,1] <- coltohyper(mydf[,1],  'D',
mybaseurl = getcururl(), append= paste0( "&v1=", input$v1, "&useexact=", 'exact', gettimeappend() ) )
mydfAll[,1] <- coltohyper(mydfAll[,1],  'D',
mybaseurl = getcururl(), append= paste0( "&v1=", input$v1, "&useexact=", 'exact', gettimeappend() ) )
}
return( list(mydf=mydf, myurl=(myurl), mydfsource = mydfsource, mydfAll=mydfAll, mydfallsource = mydfallsource  ) )
})
#**************************
# Concomitant drug table
getcocounts <- reactive({
geturlquery()
#     if ( is.null( getterm1( session ) ) ){
#       return(data.frame( c(paste('Please enter a', getsearchtype(), 'name'), '') ) )
#     }
v <- c( getbestvar1(), gettimevar() )
t <- c(  getbestterm1(), gettimerange() )
#     mylist <- getcounts999( session, v= getexactvar1(), t= getterm1( session, quote = FALSE ),
#                             count=getexactvar1(), exactrad = input$useexact )
mylist <- getcounts999( session, v= v, t= t, count=getexactvar1(), exactrad = input$useexact )
if (length(mylist)==0)
{
return( list( mydf=mydf, myurl=(myurl), sourcedf=sourcedf ) )
}
myurl <- mylist$myurl
mydf <- mylist$mydf
mydf <- mydf[!is.na(mydf[,2]), ]
sourcedf <- mydf
if (length( mydf )==0)
{
return( list( mydf=mydf, myurl=(myurl), sourcedf=sourcedf ) )
}
if (getwhich() =='D'){
colname <- i18n()$t("Drug Name")
if (input$v1 != 'patient.drug.medicinalproduct')
{
drugvar <- gsub( "patient.drug.","" , input$v1, fixed=TRUE)
drugvar <- paste0( "&v1=", drugvar )
medlinelinks <- coltohyper( sourcedf[,1], 'L',
mybaseurl = getcururl(),
display= rep('Label', nrow( sourcedf ) ),
append= drugvar )
drugvar <- paste0( "&v1=", input$v1 )
dashlinks <- coltohyper( sourcedf[, 1 ], 'DA',
mybaseurl = getcururl(),
display= rep('Dashboard', nrow( sourcedf ) ),
append= drugvar )
# mydf <- data.frame(D=dashlinks, L=medlinelinks, mydf)
mynames <- c(  colname, i18n()$t("Count"))
}
else {
medlinelinks <- rep(' ', nrow( sourcedf ) )
mydf <- data.frame(L=medlinelinks, mydf)
mynames <- c('-', colname, i18n()$t("Count"))
}
} else {
colname <- i18n()$t("Preferred Term")
mynames <- c(colname, i18n()$t("Count"))
medlinelinks <- makemedlinelink(sourcedf[,1], i18n()$t("Definition"))
mydf <- data.frame( mydf)
}
names <- c('v1','t1','v3', 't3', 'v2', 't2')
values <- c(getbestvar1(), getbestterm1(), gettimevar(), gettimerange(), getexactvar1() )
mydf[,'count'] <- numcoltohyper(mydf[ , 'count' ], mydf[ , 'term'], names, values, mybaseurl = getcururl(), addquotes=TRUE )
mydf[,'term'] <- coltohyper(mydf[,'term'], getwhich() , mybaseurl = getcururl(),
append= paste0( "&v1=", input$v1, "&useexact=", 'exact', gettimeappend()) )
names(mydf) <- mynames
return( list( mydf=mydf, myurl=(myurl), sourcedf=sourcedf ) )
})
#Indication table
getindcounts <- reactive({
geturlquery()
if ( is.null( getterm1( session ) ) ){
return(data.frame( c(paste('Please enter a', getsearchtype(), 'name'), '') ) )
}
v <- c( getbestvar1(), gettimevar() )
t <- c( getbestterm1(), gettimerange() )
#     mylist <- getcounts999( session, v= getbestvar1(), t=getbestterm1(),
#                             count= paste0( 'patient.drug.drugindication', '.exact'), exactrad = input$useexact )
mylist <- getcounts999( session, v= v, t=t, count= paste0( 'patient.drug.drugindication', '.exact'), exactrad = input$useexact )
mydf <- mylist$mydf
mydf <- mydf[!is.na(mydf[,2]), ]
sourcedf <- mydf
myurl <- mylist$myurl
if (length( mydf )==0)
{
return( list( mydf=mydf, myurl=(myurl), sourcedf=sourcedf ) )
}
names <- c('v1','t1','v3', 't3', 'v2', 't2')
values <- c( getbestvar1(), getbestterm1(), gettimevar(), gettimerange(), paste0( 'patient.drug.drugindication', '.exact') )
mydf[,2] <- numcoltohyper(mydf[ , 2], mydf[ , 1], names, values, mybaseurl = getcururl(), addquotes=TRUE )
# mydf[,1] <- makemedlinelink(sourcedf[,1], mydf[,1])
return( list( mydf=mydf, myurl=(myurl), sourcedf=sourcedf ) )
})
#Get total counts in database for each event and Total reports in database
gettotals<- reactive({
geturlquery()
v <- c( '_exists_', '_exists_', gettimevar() )
t <- c( getprrvarname(), getbestvar1(), gettimerange() )
totalurl <- buildURL(v, t,  count='', limit=1)
totalreports <- fda_fetch_p( session, totalurl, flag=NULL)
total <- totalreports$meta$results$total
v <- c( '_exists_', '_exists_', getbestvar1(), gettimevar() )
t <- c( getbestvar1(), getprrvarname(), getbestterm1(), gettimerange() )
totaldrugurl <- buildURL( v, t, count='', limit=1)
totaldrugreports <- fda_fetch_p( session, totaldrugurl, flag=paste( 'No Reports for',
ifelse(getwhich()=='D', 'drug', 'event' ), getterm1( session ), '<br>' ) )
#     if ( length( totaldrugreports )==0 )
#       {
#       totaldrugurl <- buildURL( v= getvar1(), t=getterm1( session ), count='', limit=1)
#
#       totaldrugreports <- fda_fetch_p( session, totaldrugurl, flag= paste( 'No Reports of Drug', getterm1( session ) ) )
#       }
totaldrug <- totaldrugreports$meta$results$total
adjust <- total/totaldrug
out <- list(total=total, totaldrug=totaldrug, adjust=adjust,
totalurl=(totalurl), totaldrugurl=(totaldrugurl) )
})
#Calculate PRR and put in merged table
getprr <- reactive({
geturlquery()
#    totals <- gettotals()
#    browser()
comblist <- makecomb(session, getdrugcounts()$mydf, geteventtotals(), gettotals(), getsearchtype())
comb <- comblist$comb
if(is.null(comb)){
return(NULL)
}
if (length(comb) < 1)
{
return(NULL)
# tmp <- data.frame( Error=paste('No results for', input$useexact, getterm1(session), '.'),
#                    count=0 )
# return( list( comb=tmp, sourcedf=tmp) )
}
# ror <- comblist$ror
comb$ror <- round(comb$ror, 2)
if (getwhich() =='D'){
names <- c('exactD', 'exactE','v1', 'term1','term2')
values <- c(input$useexact , 'exact', getvar1(), gsub( '"', '', getbestterm1(), fixed=TRUE  ) )
#      browser()
exacttext <- paste0(  '&exactD=', input$useexact , '&exactE=exact' )
links <-getcpalinks(comb[ , 1], names, values, getcururl() )
comb <- data.frame( M='M' , comb, links$dynprr, links$cpa,  comb$ror, comb$nij)
#      print( names(comb) )
sourcedf <- comb
colname <- i18n()$t("Preferred Term")
iname <- i18n()$t("Definition")
medlinelinks <- makemedlinelink(sourcedf[,2], iname)
} else {
names <- c('exactD', 'exactE','v2','term2', 'v1','term1')
values <- c('exact', input$useexact, getvar1(), gsub( '"', '', getbestterm1(), fixed=TRUE  ), input$v1 )
exacttext <- paste0(  '&exactD=exact', '&exactE=', input$useexact )
links <-getcpalinks(comb[ , 1], names, values, getcururl(), appendtext =  exacttext )
comb <- data.frame(D='D', M='L' , comb, links$dynprr, links$cpa,  comb$ror, comb$nij)
sourcedf <- comb
colname <- i18n()$t("Drug Name")
#browser()
iname <- c( i18n()$t("Dashboard"), i18n()$t("Label"))
if (input$v1 != 'patient.drug.medicinalproduct')
{
drugvarname <- gsub( "patient.drug.","" , input$v1 , fixed=TRUE)
drugvar <- paste0( "&v1=", drugvarname)
medlinelinks <- coltohyper( paste0( '%22' , sourcedf[, 'term' ], '%22' ), 'L',
mybaseurl = getcururl(),
display= rep(iname[2], nrow( sourcedf ) ),
append= drugvar )
drugvar <- paste0( "&v1=", input$v1 )
dashlinks <- coltohyper( paste0( '%22' , sourcedf[, 'term' ], '%22' ), 'DA',
mybaseurl = getcururl(),
display= rep(iname[1], nrow( sourcedf ) ),
append= drugvar )
comb[,'D'] <- dashlinks
}
else {
medlinelinks <- rep(' ', nrow( sourcedf ) )
}
}
comb[,'M'] <- medlinelinks
names <- c('v1','t1','v3', 't3' ,'v2', 't2')
values <- c(getbestvar1(), getbestterm1(), gettimevar(), gettimerange(), getprrvarname() )
comb[,'count.x'] <- numcoltohyper(comb[ , 'count.x'], comb[ , 'term'], names, values, mybaseurl =getcururl(), addquotes=TRUE )
names <- c('v1','t1','v3', 't3' ,'v2', 't2')
values <- c( '_exists_', getvar1(), gettimevar(), gettimerange(), getprrvarname() )
comb[, 'count.y' ] <- numcoltohyper(comb[ , 'count.y' ], comb[ , 'term'], names, values , mybaseurl = getcururl(), addquotes=TRUE)
comb[,'term'] <- coltohyper( comb[,'term'], ifelse(getwhich()=='D', 'E', 'D' ),
mybaseurl = getcururl(), append= paste0( "&v1=", input$v1, "&useexact=", 'exact', gettimeappend()) )
#     comb <- comb[order(comb$prr, decreasing = TRUE),]
#     sourcedf <- sourcedf[order(sourcedf$prr, decreasing = TRUE),]
#     row.names(comb)<- seq(1:nrow(comb))
countname <- paste( i18n()$t("Counts for"), getterm1( session ))
names(comb) <-  c( iname, colname,countname,
'Counts for All Reports','PRR', 'RRR',  'a', 'b', 'c', 'd', 'Dynamic PRR', 'Change Point Analysis', 'ROR', 'nij')
# keptcols <-  c( iname, colname,countname,
#                                 'Counts for All Reports', 'PRR',  'Dynamic PRR', 'Change Point Analysis', 'ROR', 'nij')
keptcols <-  c(  colname, countname,
'PRR', 'ROR')
#    mydf <- mydf[, c(1:4, 7,8,9)]
return( list( comb=comb[, keptcols], sourcedf=sourcedf, countname=countname, colname=colname) )
})
geteventtotalstable <- reactive({
geturlquery()
mydf <- geteventtotals()
if(is.null(mydf)){
return(NULL)
}
sourcedf <- mydf
names <- c('v1','t1','v3', 't3' ,'v2', 't2')
values <- c('_exists_', getvar1( ), gettimevar(), gettimerange()  , getprrvarname() )
mydf[,2] <- numcoltohyper(mydf[ , 2], mydf[ , 1], names, values, mybaseurl = getcururl(), addquotes=TRUE )
mydf[,1] <- coltohyper(mydf[,1], ifelse( getwhich()=='D', 'E', 'D'),
mybaseurl = getcururl(), append= paste0( "&v1=", input$v1, "&useexact=", 'exact', gettimeappend() ) )
print(head(mydf))
return( list(mydf=mydf, sourcedf=sourcedf) )
})
print(head(mydf))
View(tt)
View(prrForExcel)
exit
View(prrForExcel)
prrForExcel[["sourcedf"]][["comb.ror"]]
prrForExcel[["sourcedf"]][["prr"]]
prrForExcel[["sourcedf"]][["links.dynprr"]]
prrForExcel[["comb"]][["PRR"]]
View(varprefixes)
varprefixes
View(specifieddrug2ForExcel)
shiny::runApp('RR_D')
mydf<-prr()
prrForExcel[["sourcedf"]][["term"]]
install.packages("tm")
shiny::runApp('RR_D')
prrForExcel[["countname"]]
runApp('RR_D')
View(prre)
View(makecomb)
View(prrd)
View(prre_ci)
View(ror)
View(gettt)
View(allvars)
View(allvars)
View(buildtable)
View(extractbaseurl)
View(allvars)
View(fda_fetch_p)
runApp('RR_D')
shiny::runApp('RR_D')
View(specifieddrug2ForExcel)
runApp('RR_D')
shiny::runApp('RR_D')
runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/QuickViewDrugEvent')
runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/RR_D')
runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/QuickViewDrugEvent')
shiny::runApp('RR_D')
runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/QuickViewDrugEvent')
install.packages("plotly")
runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/RR_D_Activesubstance')
runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
View(getcounts999)
runApp('QuickViewDrugEvent')
runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrug')
runApp('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/RR_D')
View(getdf)
runApp('RR_D')
View(getdrugvarchoices)
totalurl <- buildURL(v, t,  count='', limit=1)
runApp('RR_D')
shiny::runApp('RR_D')
totaldrugurl
source('C:/Users/dimst/Desktop/project/pvclinical-dashboard/RShinyApps/sharedscripts/prr2.R')
View(popprr2)
runApp('RR_D')
runApp('RR_D')
runApp('RR_D')
totalurl
nij <- 1269
n.j <- 214696
n.. <- 10694691
ni. <- 21569
num <- nij/(n.j-nij)
denom <- (ni.)/(n.. - ni.)
val <- num/denom
val
nij <- 1269-1202
n.j <- 214696
n.. <- 10694691
ni. <- 21570-19284
num <- nij/(n.j-nij)
denom <- (ni.)/(n.. - ni.)
val <- num/denom
val
num1 <- nij/n.j
denom1 <- ( ni.-nij )/(  n.. - n.j )
prr_test <- num1/denom1
prr_test
shiny::runApp('QuickViewDrugEvent')
shiny::runApp('QuickViewDrugEvent')
runApp('QuickViewDrugEvent')
